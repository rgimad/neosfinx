EBNF grammar of Neosfinx language

| - or, [] - 0 or 1 times, {} - 0 or more times

================================================

================================================
Keywords:
================================================

BREAK  CASE    CONTINUE  ELSE    EXTRACT  FALSE  FOR
FROM   GOTO    IF        LOOPNZ  RETURN   SWITCH TRUE
WHILE

_export  asm     break   byte      case     cdecl   char       continue
default  do      dword   else      enum     extern  far        fastcall
float    for     goto    if        inline   int     interrupt  long
loop     loopnz  pascal  return    short    signed  sizeof     static
stdcall  struct  switch  union     unsigned void    while      word

ESCHAR  ESBYTE  ESINT  ESWORD  ESLONG  ESDWORD  ESFLOAT
CSCHAR  CSBYTE  CSINT  CSWORD  CSLONG  CSDWORD  CSFLOAT
SSCHAR  SSBYTE  SSINT  SSWORD  SSLONG  SSDWORD  SSFLOAT
DSCHAR  DSBYTE  DSINT  DSWORD  DSLONG  DSDWORD  DSFLOAT
FSCHAR  FSBYTE  FSINT  FSWORD  FSLONG  FSDWORD  FSFLOAT
GSCHAR  GSBYTE  GSINT  GSWORD  GSLONG  GSDWORD  GSFLOAT

CARRYFLAG    MINUSFLAG  NOTCARRYFLAG  NOTOVERFLOW
NOTZEROFLAG  OVERFLOW   PLUSFLAG      ZEROFLAG

AX   CX   DX   BX   SP   BP   SI   DI
EAX  ECX  EDX  EBX  ESP  EBP  ESI  EDI
AL   CL   DL   BL   AH   CH   DH   BH
ES   CS   SS   DS   FS   GS

ST(0)  ST(1)  ST(2)  ST(3)  ST(4)  ST(5)  ST(6)  ST(7)  ST
st(0)  st(1)  st(2)  st(3)  st(4)  st(5)  st(6)  st(7)  st

__CODEPTR__ __COMPILER__ __DATAPTR__ __DATESTR__ __DATE__    __DAY__
__HOUR__    __LINE__     __MINUTE__  __MONTH__   __POSTPTR__ __SECOND__
__TIME__    __VER1__     __VER2__    __WEEKDAY__ __YEAR__

================================================
Operators:
================================================
SYMBOL  | FUNCTION                  | EXAMPLE
--------------------------------------------------------------------
    /*  | begin comment block       | /* comment */
    */  | end comment block         | /* comment */
        |                           | 
    //  | comment until line end    | // комментарий
        |                           | 
     =  | assign                    | AX = 12;
     +  | add                       | AX = BX + 12;
     -  | subract                   | house = dog - church;
     *  | multiply or pointer       | x = y * z; AL = * var;
     /  | divide                    | x1 = dog / legs;
     &  | bitwise AND               | polution = stupid & pointless;
     |  | bitwise OR                | yes = i | mabe;
     ^  | bitwise XOR               | snap = got ^ power;
    <<  | left bit shift            | x = y << z;
    >>  | right bit shift           | x = y >> z;
        |                           | 
    +=  | add and assign            | fox += 12;   // fox = fox +12;
    -=  | subract and assign        | cow -= BX;   // cow = cow - BX;
    *=  | multiply and assign       | a *= b;      // a = a * b;
    /=  | divide and assign         | a /= b;      // a = a / b;
    &=  | bitwise AND and assign    | p &= q;      // p = p & q;
    |=  | bitwise OR and assign     | p | = z;     // p = p |  z;
    ^=  | bitwise XOR and assign    | u ^= s;      // u = u ^ s;
    <<= | shift bit left and assign | x <<= z;     // x = x << z
    >>= | shift bit right and assign| x >>= z;     // x = x >> z
        |                           | 
    ><  | swap values               | x >< y; // swaps x and y values
        |                           | 
    ==  | equal                     | IF(AX == 12)
     >  | greater                   | IF(junk > BOGUS)
     <  | less                      | if( x < y )
    >=  | greater equal             | if(AX >= 12)
    <=  | less equal                | IF(BL <= CH)
    !=  | not equal                 | IF(girl != boy)
    <>  | not equal                 | if (cat<>dog) // same as !=
        |                           | 
    @   | paste code                | @ COLDBOOT(); // pastes code of COLDBOOT here
    :   | dynamic procedure         | : functionname () // declares functionname
    $   | assemly instruction       | $ PUSH AX     // pushes AX to the stack
    #   | get address (like & in C) | loc = #cow;   // loc = address of cow
        | or directive              | #resize FALSE
    !   | оператор NOT или смена    | !x_var;  if(!proc())
        | флага операции сравнения. | 
   ...  | any number of arguments   | void proc(...);
   ::   |  scope resolution operator| ::var = 0;
